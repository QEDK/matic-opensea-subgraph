// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class SignatureValidatorApproval extends ethereum.Event {
  get params(): SignatureValidatorApproval__Params {
    return new SignatureValidatorApproval__Params(this);
  }
}

export class SignatureValidatorApproval__Params {
  _event: SignatureValidatorApproval;

  constructor(event: SignatureValidatorApproval) {
    this._event = event;
  }

  get signerAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get validatorAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Fill extends ethereum.Event {
  get params(): Fill__Params {
    return new Fill__Params(this);
  }
}

export class Fill__Params {
  _event: Fill;

  constructor(event: Fill) {
    this._event = event;
  }

  get makerAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get feeRecipientAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get takerAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get senderAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get makerAssetFilledAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get takerAssetFilledAmount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get makerFeePaid(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get takerFeePaid(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get orderHash(): Bytes {
    return this._event.parameters[8].value.toBytes();
  }

  get makerAssetData(): Bytes {
    return this._event.parameters[9].value.toBytes();
  }

  get takerAssetData(): Bytes {
    return this._event.parameters[10].value.toBytes();
  }
}

export class Cancel extends ethereum.Event {
  get params(): Cancel__Params {
    return new Cancel__Params(this);
  }
}

export class Cancel__Params {
  _event: Cancel;

  constructor(event: Cancel) {
    this._event = event;
  }

  get makerAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get feeRecipientAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get senderAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get orderHash(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get makerAssetData(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get takerAssetData(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }
}

export class CancelUpTo extends ethereum.Event {
  get params(): CancelUpTo__Params {
    return new CancelUpTo__Params(this);
  }
}

export class CancelUpTo__Params {
  _event: CancelUpTo;

  constructor(event: CancelUpTo) {
    this._event = event;
  }

  get makerAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get senderAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get orderEpoch(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AssetProxyRegistered extends ethereum.Event {
  get params(): AssetProxyRegistered__Params {
    return new AssetProxyRegistered__Params(this);
  }
}

export class AssetProxyRegistered__Params {
  _event: AssetProxyRegistered;

  constructor(event: AssetProxyRegistered) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get assetProxy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Contract__batchFillOrdersResultTotalFillResultsStruct extends ethereum.Tuple {
  get makerAssetFilledAmount(): BigInt {
    return this[0].toBigInt();
  }

  get takerAssetFilledAmount(): BigInt {
    return this[1].toBigInt();
  }

  get makerFeePaid(): BigInt {
    return this[2].toBigInt();
  }

  get takerFeePaid(): BigInt {
    return this[3].toBigInt();
  }
}

export class Contract__batchFillOrdersInputOrdersStruct extends ethereum.Tuple {
  get makerAddress(): Address {
    return this[0].toAddress();
  }

  get takerAddress(): Address {
    return this[1].toAddress();
  }

  get feeRecipientAddress(): Address {
    return this[2].toAddress();
  }

  get senderAddress(): Address {
    return this[3].toAddress();
  }

  get makerAssetAmount(): BigInt {
    return this[4].toBigInt();
  }

  get takerAssetAmount(): BigInt {
    return this[5].toBigInt();
  }

  get makerFee(): BigInt {
    return this[6].toBigInt();
  }

  get takerFee(): BigInt {
    return this[7].toBigInt();
  }

  get expirationTimeSeconds(): BigInt {
    return this[8].toBigInt();
  }

  get salt(): BigInt {
    return this[9].toBigInt();
  }

  get makerAssetData(): Bytes {
    return this[10].toBytes();
  }

  get takerAssetData(): Bytes {
    return this[11].toBytes();
  }
}

export class Contract__matchOrdersResultMatchedFillResultsStruct extends ethereum.Tuple {
  get left(): Contract__matchOrdersResultMatchedFillResultsLeftStruct {
    return this[0].toTuple() as Contract__matchOrdersResultMatchedFillResultsLeftStruct;
  }

  get right(): Contract__matchOrdersResultMatchedFillResultsRightStruct {
    return this[1].toTuple() as Contract__matchOrdersResultMatchedFillResultsRightStruct;
  }

  get leftMakerAssetSpreadAmount(): BigInt {
    return this[2].toBigInt();
  }
}

export class Contract__matchOrdersResultMatchedFillResultsLeftStruct extends ethereum.Tuple {
  get makerAssetFilledAmount(): BigInt {
    return this[0].toBigInt();
  }

  get takerAssetFilledAmount(): BigInt {
    return this[1].toBigInt();
  }

  get makerFeePaid(): BigInt {
    return this[2].toBigInt();
  }

  get takerFeePaid(): BigInt {
    return this[3].toBigInt();
  }
}

export class Contract__matchOrdersResultMatchedFillResultsRightStruct extends ethereum.Tuple {
  get makerAssetFilledAmount(): BigInt {
    return this[0].toBigInt();
  }

  get takerAssetFilledAmount(): BigInt {
    return this[1].toBigInt();
  }

  get makerFeePaid(): BigInt {
    return this[2].toBigInt();
  }

  get takerFeePaid(): BigInt {
    return this[3].toBigInt();
  }
}

export class Contract__matchOrdersInputLeftOrderStruct extends ethereum.Tuple {
  get makerAddress(): Address {
    return this[0].toAddress();
  }

  get takerAddress(): Address {
    return this[1].toAddress();
  }

  get feeRecipientAddress(): Address {
    return this[2].toAddress();
  }

  get senderAddress(): Address {
    return this[3].toAddress();
  }

  get makerAssetAmount(): BigInt {
    return this[4].toBigInt();
  }

  get takerAssetAmount(): BigInt {
    return this[5].toBigInt();
  }

  get makerFee(): BigInt {
    return this[6].toBigInt();
  }

  get takerFee(): BigInt {
    return this[7].toBigInt();
  }

  get expirationTimeSeconds(): BigInt {
    return this[8].toBigInt();
  }

  get salt(): BigInt {
    return this[9].toBigInt();
  }

  get makerAssetData(): Bytes {
    return this[10].toBytes();
  }

  get takerAssetData(): Bytes {
    return this[11].toBytes();
  }
}

export class Contract__matchOrdersInputRightOrderStruct extends ethereum.Tuple {
  get makerAddress(): Address {
    return this[0].toAddress();
  }

  get takerAddress(): Address {
    return this[1].toAddress();
  }

  get feeRecipientAddress(): Address {
    return this[2].toAddress();
  }

  get senderAddress(): Address {
    return this[3].toAddress();
  }

  get makerAssetAmount(): BigInt {
    return this[4].toBigInt();
  }

  get takerAssetAmount(): BigInt {
    return this[5].toBigInt();
  }

  get makerFee(): BigInt {
    return this[6].toBigInt();
  }

  get takerFee(): BigInt {
    return this[7].toBigInt();
  }

  get expirationTimeSeconds(): BigInt {
    return this[8].toBigInt();
  }

  get salt(): BigInt {
    return this[9].toBigInt();
  }

  get makerAssetData(): Bytes {
    return this[10].toBytes();
  }

  get takerAssetData(): Bytes {
    return this[11].toBytes();
  }
}

export class Contract__fillOrderNoThrowResultFillResultsStruct extends ethereum.Tuple {
  get makerAssetFilledAmount(): BigInt {
    return this[0].toBigInt();
  }

  get takerAssetFilledAmount(): BigInt {
    return this[1].toBigInt();
  }

  get makerFeePaid(): BigInt {
    return this[2].toBigInt();
  }

  get takerFeePaid(): BigInt {
    return this[3].toBigInt();
  }
}

export class Contract__fillOrderNoThrowInputOrderStruct extends ethereum.Tuple {
  get makerAddress(): Address {
    return this[0].toAddress();
  }

  get takerAddress(): Address {
    return this[1].toAddress();
  }

  get feeRecipientAddress(): Address {
    return this[2].toAddress();
  }

  get senderAddress(): Address {
    return this[3].toAddress();
  }

  get makerAssetAmount(): BigInt {
    return this[4].toBigInt();
  }

  get takerAssetAmount(): BigInt {
    return this[5].toBigInt();
  }

  get makerFee(): BigInt {
    return this[6].toBigInt();
  }

  get takerFee(): BigInt {
    return this[7].toBigInt();
  }

  get expirationTimeSeconds(): BigInt {
    return this[8].toBigInt();
  }

  get salt(): BigInt {
    return this[9].toBigInt();
  }

  get makerAssetData(): Bytes {
    return this[10].toBytes();
  }

  get takerAssetData(): Bytes {
    return this[11].toBytes();
  }
}

export class Contract__batchFillOrKillOrdersResultTotalFillResultsStruct extends ethereum.Tuple {
  get makerAssetFilledAmount(): BigInt {
    return this[0].toBigInt();
  }

  get takerAssetFilledAmount(): BigInt {
    return this[1].toBigInt();
  }

  get makerFeePaid(): BigInt {
    return this[2].toBigInt();
  }

  get takerFeePaid(): BigInt {
    return this[3].toBigInt();
  }
}

export class Contract__batchFillOrKillOrdersInputOrdersStruct extends ethereum.Tuple {
  get makerAddress(): Address {
    return this[0].toAddress();
  }

  get takerAddress(): Address {
    return this[1].toAddress();
  }

  get feeRecipientAddress(): Address {
    return this[2].toAddress();
  }

  get senderAddress(): Address {
    return this[3].toAddress();
  }

  get makerAssetAmount(): BigInt {
    return this[4].toBigInt();
  }

  get takerAssetAmount(): BigInt {
    return this[5].toBigInt();
  }

  get makerFee(): BigInt {
    return this[6].toBigInt();
  }

  get takerFee(): BigInt {
    return this[7].toBigInt();
  }

  get expirationTimeSeconds(): BigInt {
    return this[8].toBigInt();
  }

  get salt(): BigInt {
    return this[9].toBigInt();
  }

  get makerAssetData(): Bytes {
    return this[10].toBytes();
  }

  get takerAssetData(): Bytes {
    return this[11].toBytes();
  }
}

export class Contract__batchFillOrdersNoThrowResultTotalFillResultsStruct extends ethereum.Tuple {
  get makerAssetFilledAmount(): BigInt {
    return this[0].toBigInt();
  }

  get takerAssetFilledAmount(): BigInt {
    return this[1].toBigInt();
  }

  get makerFeePaid(): BigInt {
    return this[2].toBigInt();
  }

  get takerFeePaid(): BigInt {
    return this[3].toBigInt();
  }
}

export class Contract__batchFillOrdersNoThrowInputOrdersStruct extends ethereum.Tuple {
  get makerAddress(): Address {
    return this[0].toAddress();
  }

  get takerAddress(): Address {
    return this[1].toAddress();
  }

  get feeRecipientAddress(): Address {
    return this[2].toAddress();
  }

  get senderAddress(): Address {
    return this[3].toAddress();
  }

  get makerAssetAmount(): BigInt {
    return this[4].toBigInt();
  }

  get takerAssetAmount(): BigInt {
    return this[5].toBigInt();
  }

  get makerFee(): BigInt {
    return this[6].toBigInt();
  }

  get takerFee(): BigInt {
    return this[7].toBigInt();
  }

  get expirationTimeSeconds(): BigInt {
    return this[8].toBigInt();
  }

  get salt(): BigInt {
    return this[9].toBigInt();
  }

  get makerAssetData(): Bytes {
    return this[10].toBytes();
  }

  get takerAssetData(): Bytes {
    return this[11].toBytes();
  }
}

export class Contract__fillOrKillOrderResultFillResultsStruct extends ethereum.Tuple {
  get makerAssetFilledAmount(): BigInt {
    return this[0].toBigInt();
  }

  get takerAssetFilledAmount(): BigInt {
    return this[1].toBigInt();
  }

  get makerFeePaid(): BigInt {
    return this[2].toBigInt();
  }

  get takerFeePaid(): BigInt {
    return this[3].toBigInt();
  }
}

export class Contract__fillOrKillOrderInputOrderStruct extends ethereum.Tuple {
  get makerAddress(): Address {
    return this[0].toAddress();
  }

  get takerAddress(): Address {
    return this[1].toAddress();
  }

  get feeRecipientAddress(): Address {
    return this[2].toAddress();
  }

  get senderAddress(): Address {
    return this[3].toAddress();
  }

  get makerAssetAmount(): BigInt {
    return this[4].toBigInt();
  }

  get takerAssetAmount(): BigInt {
    return this[5].toBigInt();
  }

  get makerFee(): BigInt {
    return this[6].toBigInt();
  }

  get takerFee(): BigInt {
    return this[7].toBigInt();
  }

  get expirationTimeSeconds(): BigInt {
    return this[8].toBigInt();
  }

  get salt(): BigInt {
    return this[9].toBigInt();
  }

  get makerAssetData(): Bytes {
    return this[10].toBytes();
  }

  get takerAssetData(): Bytes {
    return this[11].toBytes();
  }
}

export class Contract__marketSellOrdersResultTotalFillResultsStruct extends ethereum.Tuple {
  get makerAssetFilledAmount(): BigInt {
    return this[0].toBigInt();
  }

  get takerAssetFilledAmount(): BigInt {
    return this[1].toBigInt();
  }

  get makerFeePaid(): BigInt {
    return this[2].toBigInt();
  }

  get takerFeePaid(): BigInt {
    return this[3].toBigInt();
  }
}

export class Contract__marketSellOrdersInputOrdersStruct extends ethereum.Tuple {
  get makerAddress(): Address {
    return this[0].toAddress();
  }

  get takerAddress(): Address {
    return this[1].toAddress();
  }

  get feeRecipientAddress(): Address {
    return this[2].toAddress();
  }

  get senderAddress(): Address {
    return this[3].toAddress();
  }

  get makerAssetAmount(): BigInt {
    return this[4].toBigInt();
  }

  get takerAssetAmount(): BigInt {
    return this[5].toBigInt();
  }

  get makerFee(): BigInt {
    return this[6].toBigInt();
  }

  get takerFee(): BigInt {
    return this[7].toBigInt();
  }

  get expirationTimeSeconds(): BigInt {
    return this[8].toBigInt();
  }

  get salt(): BigInt {
    return this[9].toBigInt();
  }

  get makerAssetData(): Bytes {
    return this[10].toBytes();
  }

  get takerAssetData(): Bytes {
    return this[11].toBytes();
  }
}

export class Contract__getOrdersInfoResultValue0Struct extends ethereum.Tuple {
  get orderStatus(): i32 {
    return this[0].toI32();
  }

  get orderHash(): Bytes {
    return this[1].toBytes();
  }

  get orderTakerAssetFilledAmount(): BigInt {
    return this[2].toBigInt();
  }
}

export class Contract__getOrdersInfoInputOrdersStruct extends ethereum.Tuple {
  get makerAddress(): Address {
    return this[0].toAddress();
  }

  get takerAddress(): Address {
    return this[1].toAddress();
  }

  get feeRecipientAddress(): Address {
    return this[2].toAddress();
  }

  get senderAddress(): Address {
    return this[3].toAddress();
  }

  get makerAssetAmount(): BigInt {
    return this[4].toBigInt();
  }

  get takerAssetAmount(): BigInt {
    return this[5].toBigInt();
  }

  get makerFee(): BigInt {
    return this[6].toBigInt();
  }

  get takerFee(): BigInt {
    return this[7].toBigInt();
  }

  get expirationTimeSeconds(): BigInt {
    return this[8].toBigInt();
  }

  get salt(): BigInt {
    return this[9].toBigInt();
  }

  get makerAssetData(): Bytes {
    return this[10].toBytes();
  }

  get takerAssetData(): Bytes {
    return this[11].toBytes();
  }
}

export class Contract__marketBuyOrdersNoThrowResultTotalFillResultsStruct extends ethereum.Tuple {
  get makerAssetFilledAmount(): BigInt {
    return this[0].toBigInt();
  }

  get takerAssetFilledAmount(): BigInt {
    return this[1].toBigInt();
  }

  get makerFeePaid(): BigInt {
    return this[2].toBigInt();
  }

  get takerFeePaid(): BigInt {
    return this[3].toBigInt();
  }
}

export class Contract__marketBuyOrdersNoThrowInputOrdersStruct extends ethereum.Tuple {
  get makerAddress(): Address {
    return this[0].toAddress();
  }

  get takerAddress(): Address {
    return this[1].toAddress();
  }

  get feeRecipientAddress(): Address {
    return this[2].toAddress();
  }

  get senderAddress(): Address {
    return this[3].toAddress();
  }

  get makerAssetAmount(): BigInt {
    return this[4].toBigInt();
  }

  get takerAssetAmount(): BigInt {
    return this[5].toBigInt();
  }

  get makerFee(): BigInt {
    return this[6].toBigInt();
  }

  get takerFee(): BigInt {
    return this[7].toBigInt();
  }

  get expirationTimeSeconds(): BigInt {
    return this[8].toBigInt();
  }

  get salt(): BigInt {
    return this[9].toBigInt();
  }

  get makerAssetData(): Bytes {
    return this[10].toBytes();
  }

  get takerAssetData(): Bytes {
    return this[11].toBytes();
  }
}

export class Contract__fillOrderResultFillResultsStruct extends ethereum.Tuple {
  get makerAssetFilledAmount(): BigInt {
    return this[0].toBigInt();
  }

  get takerAssetFilledAmount(): BigInt {
    return this[1].toBigInt();
  }

  get makerFeePaid(): BigInt {
    return this[2].toBigInt();
  }

  get takerFeePaid(): BigInt {
    return this[3].toBigInt();
  }
}

export class Contract__fillOrderInputOrderStruct extends ethereum.Tuple {
  get makerAddress(): Address {
    return this[0].toAddress();
  }

  get takerAddress(): Address {
    return this[1].toAddress();
  }

  get feeRecipientAddress(): Address {
    return this[2].toAddress();
  }

  get senderAddress(): Address {
    return this[3].toAddress();
  }

  get makerAssetAmount(): BigInt {
    return this[4].toBigInt();
  }

  get takerAssetAmount(): BigInt {
    return this[5].toBigInt();
  }

  get makerFee(): BigInt {
    return this[6].toBigInt();
  }

  get takerFee(): BigInt {
    return this[7].toBigInt();
  }

  get expirationTimeSeconds(): BigInt {
    return this[8].toBigInt();
  }

  get salt(): BigInt {
    return this[9].toBigInt();
  }

  get makerAssetData(): Bytes {
    return this[10].toBytes();
  }

  get takerAssetData(): Bytes {
    return this[11].toBytes();
  }
}

export class Contract__getOrderInfoResultOrderInfoStruct extends ethereum.Tuple {
  get orderStatus(): i32 {
    return this[0].toI32();
  }

  get orderHash(): Bytes {
    return this[1].toBytes();
  }

  get orderTakerAssetFilledAmount(): BigInt {
    return this[2].toBigInt();
  }
}

export class Contract__getOrderInfoInputOrderStruct extends ethereum.Tuple {
  get makerAddress(): Address {
    return this[0].toAddress();
  }

  get takerAddress(): Address {
    return this[1].toAddress();
  }

  get feeRecipientAddress(): Address {
    return this[2].toAddress();
  }

  get senderAddress(): Address {
    return this[3].toAddress();
  }

  get makerAssetAmount(): BigInt {
    return this[4].toBigInt();
  }

  get takerAssetAmount(): BigInt {
    return this[5].toBigInt();
  }

  get makerFee(): BigInt {
    return this[6].toBigInt();
  }

  get takerFee(): BigInt {
    return this[7].toBigInt();
  }

  get expirationTimeSeconds(): BigInt {
    return this[8].toBigInt();
  }

  get salt(): BigInt {
    return this[9].toBigInt();
  }

  get makerAssetData(): Bytes {
    return this[10].toBytes();
  }

  get takerAssetData(): Bytes {
    return this[11].toBytes();
  }
}

export class Contract__marketSellOrdersNoThrowResultTotalFillResultsStruct extends ethereum.Tuple {
  get makerAssetFilledAmount(): BigInt {
    return this[0].toBigInt();
  }

  get takerAssetFilledAmount(): BigInt {
    return this[1].toBigInt();
  }

  get makerFeePaid(): BigInt {
    return this[2].toBigInt();
  }

  get takerFeePaid(): BigInt {
    return this[3].toBigInt();
  }
}

export class Contract__marketSellOrdersNoThrowInputOrdersStruct extends ethereum.Tuple {
  get makerAddress(): Address {
    return this[0].toAddress();
  }

  get takerAddress(): Address {
    return this[1].toAddress();
  }

  get feeRecipientAddress(): Address {
    return this[2].toAddress();
  }

  get senderAddress(): Address {
    return this[3].toAddress();
  }

  get makerAssetAmount(): BigInt {
    return this[4].toBigInt();
  }

  get takerAssetAmount(): BigInt {
    return this[5].toBigInt();
  }

  get makerFee(): BigInt {
    return this[6].toBigInt();
  }

  get takerFee(): BigInt {
    return this[7].toBigInt();
  }

  get expirationTimeSeconds(): BigInt {
    return this[8].toBigInt();
  }

  get salt(): BigInt {
    return this[9].toBigInt();
  }

  get makerAssetData(): Bytes {
    return this[10].toBytes();
  }

  get takerAssetData(): Bytes {
    return this[11].toBytes();
  }
}

export class Contract__marketBuyOrdersResultTotalFillResultsStruct extends ethereum.Tuple {
  get makerAssetFilledAmount(): BigInt {
    return this[0].toBigInt();
  }

  get takerAssetFilledAmount(): BigInt {
    return this[1].toBigInt();
  }

  get makerFeePaid(): BigInt {
    return this[2].toBigInt();
  }

  get takerFeePaid(): BigInt {
    return this[3].toBigInt();
  }
}

export class Contract__marketBuyOrdersInputOrdersStruct extends ethereum.Tuple {
  get makerAddress(): Address {
    return this[0].toAddress();
  }

  get takerAddress(): Address {
    return this[1].toAddress();
  }

  get feeRecipientAddress(): Address {
    return this[2].toAddress();
  }

  get senderAddress(): Address {
    return this[3].toAddress();
  }

  get makerAssetAmount(): BigInt {
    return this[4].toBigInt();
  }

  get takerAssetAmount(): BigInt {
    return this[5].toBigInt();
  }

  get makerFee(): BigInt {
    return this[6].toBigInt();
  }

  get takerFee(): BigInt {
    return this[7].toBigInt();
  }

  get expirationTimeSeconds(): BigInt {
    return this[8].toBigInt();
  }

  get salt(): BigInt {
    return this[9].toBigInt();
  }

  get makerAssetData(): Bytes {
    return this[10].toBytes();
  }

  get takerAssetData(): Bytes {
    return this[11].toBytes();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  filled(param0: Bytes): BigInt {
    let result = super.call("filled", "filled(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toBigInt();
  }

  try_filled(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall("filled", "filled(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  batchFillOrders(
    orders: Array<Contract__batchFillOrdersInputOrdersStruct>,
    takerAssetFillAmounts: Array<BigInt>,
    signatures: Array<Bytes>
  ): Contract__batchFillOrdersResultTotalFillResultsStruct {
    let result = super.call(
      "batchFillOrders",
      "batchFillOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256[],bytes[]):((uint256,uint256,uint256,uint256))",
      [
        ethereum.Value.fromTupleArray(orders),
        ethereum.Value.fromUnsignedBigIntArray(takerAssetFillAmounts),
        ethereum.Value.fromBytesArray(signatures)
      ]
    );

    return result[0].toTuple() as Contract__batchFillOrdersResultTotalFillResultsStruct;
  }

  try_batchFillOrders(
    orders: Array<Contract__batchFillOrdersInputOrdersStruct>,
    takerAssetFillAmounts: Array<BigInt>,
    signatures: Array<Bytes>
  ): ethereum.CallResult<
    Contract__batchFillOrdersResultTotalFillResultsStruct
  > {
    let result = super.tryCall(
      "batchFillOrders",
      "batchFillOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256[],bytes[]):((uint256,uint256,uint256,uint256))",
      [
        ethereum.Value.fromTupleArray(orders),
        ethereum.Value.fromUnsignedBigIntArray(takerAssetFillAmounts),
        ethereum.Value.fromBytesArray(signatures)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as Contract__batchFillOrdersResultTotalFillResultsStruct
    );
  }

  cancelled(param0: Bytes): boolean {
    let result = super.call("cancelled", "cancelled(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toBoolean();
  }

  try_cancelled(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("cancelled", "cancelled(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  matchOrders(
    leftOrder: Contract__matchOrdersInputLeftOrderStruct,
    rightOrder: Contract__matchOrdersInputRightOrderStruct,
    leftSignature: Bytes,
    rightSignature: Bytes
  ): Contract__matchOrdersResultMatchedFillResultsStruct {
    let result = super.call(
      "matchOrders",
      "matchOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes,bytes):(((uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256),uint256))",
      [
        ethereum.Value.fromTuple(leftOrder),
        ethereum.Value.fromTuple(rightOrder),
        ethereum.Value.fromBytes(leftSignature),
        ethereum.Value.fromBytes(rightSignature)
      ]
    );

    return result[0].toTuple() as Contract__matchOrdersResultMatchedFillResultsStruct;
  }

  try_matchOrders(
    leftOrder: Contract__matchOrdersInputLeftOrderStruct,
    rightOrder: Contract__matchOrdersInputRightOrderStruct,
    leftSignature: Bytes,
    rightSignature: Bytes
  ): ethereum.CallResult<Contract__matchOrdersResultMatchedFillResultsStruct> {
    let result = super.tryCall(
      "matchOrders",
      "matchOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes,bytes):(((uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256),uint256))",
      [
        ethereum.Value.fromTuple(leftOrder),
        ethereum.Value.fromTuple(rightOrder),
        ethereum.Value.fromBytes(leftSignature),
        ethereum.Value.fromBytes(rightSignature)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as Contract__matchOrdersResultMatchedFillResultsStruct
    );
  }

  fillOrderNoThrow(
    order: Contract__fillOrderNoThrowInputOrderStruct,
    takerAssetFillAmount: BigInt,
    signature: Bytes
  ): Contract__fillOrderNoThrowResultFillResultsStruct {
    let result = super.call(
      "fillOrderNoThrow",
      "fillOrderNoThrow((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),uint256,bytes):((uint256,uint256,uint256,uint256))",
      [
        ethereum.Value.fromTuple(order),
        ethereum.Value.fromUnsignedBigInt(takerAssetFillAmount),
        ethereum.Value.fromBytes(signature)
      ]
    );

    return result[0].toTuple() as Contract__fillOrderNoThrowResultFillResultsStruct;
  }

  try_fillOrderNoThrow(
    order: Contract__fillOrderNoThrowInputOrderStruct,
    takerAssetFillAmount: BigInt,
    signature: Bytes
  ): ethereum.CallResult<Contract__fillOrderNoThrowResultFillResultsStruct> {
    let result = super.tryCall(
      "fillOrderNoThrow",
      "fillOrderNoThrow((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),uint256,bytes):((uint256,uint256,uint256,uint256))",
      [
        ethereum.Value.fromTuple(order),
        ethereum.Value.fromUnsignedBigInt(takerAssetFillAmount),
        ethereum.Value.fromBytes(signature)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as Contract__fillOrderNoThrowResultFillResultsStruct
    );
  }

  assetProxies(param0: Bytes): Address {
    let result = super.call("assetProxies", "assetProxies(bytes4):(address)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toAddress();
  }

  try_assetProxies(param0: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "assetProxies",
      "assetProxies(bytes4):(address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  batchFillOrKillOrders(
    orders: Array<Contract__batchFillOrKillOrdersInputOrdersStruct>,
    takerAssetFillAmounts: Array<BigInt>,
    signatures: Array<Bytes>
  ): Contract__batchFillOrKillOrdersResultTotalFillResultsStruct {
    let result = super.call(
      "batchFillOrKillOrders",
      "batchFillOrKillOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256[],bytes[]):((uint256,uint256,uint256,uint256))",
      [
        ethereum.Value.fromTupleArray(orders),
        ethereum.Value.fromUnsignedBigIntArray(takerAssetFillAmounts),
        ethereum.Value.fromBytesArray(signatures)
      ]
    );

    return result[0].toTuple() as Contract__batchFillOrKillOrdersResultTotalFillResultsStruct;
  }

  try_batchFillOrKillOrders(
    orders: Array<Contract__batchFillOrKillOrdersInputOrdersStruct>,
    takerAssetFillAmounts: Array<BigInt>,
    signatures: Array<Bytes>
  ): ethereum.CallResult<
    Contract__batchFillOrKillOrdersResultTotalFillResultsStruct
  > {
    let result = super.tryCall(
      "batchFillOrKillOrders",
      "batchFillOrKillOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256[],bytes[]):((uint256,uint256,uint256,uint256))",
      [
        ethereum.Value.fromTupleArray(orders),
        ethereum.Value.fromUnsignedBigIntArray(takerAssetFillAmounts),
        ethereum.Value.fromBytesArray(signatures)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as Contract__batchFillOrKillOrdersResultTotalFillResultsStruct
    );
  }

  batchFillOrdersNoThrow(
    orders: Array<Contract__batchFillOrdersNoThrowInputOrdersStruct>,
    takerAssetFillAmounts: Array<BigInt>,
    signatures: Array<Bytes>
  ): Contract__batchFillOrdersNoThrowResultTotalFillResultsStruct {
    let result = super.call(
      "batchFillOrdersNoThrow",
      "batchFillOrdersNoThrow((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256[],bytes[]):((uint256,uint256,uint256,uint256))",
      [
        ethereum.Value.fromTupleArray(orders),
        ethereum.Value.fromUnsignedBigIntArray(takerAssetFillAmounts),
        ethereum.Value.fromBytesArray(signatures)
      ]
    );

    return result[0].toTuple() as Contract__batchFillOrdersNoThrowResultTotalFillResultsStruct;
  }

  try_batchFillOrdersNoThrow(
    orders: Array<Contract__batchFillOrdersNoThrowInputOrdersStruct>,
    takerAssetFillAmounts: Array<BigInt>,
    signatures: Array<Bytes>
  ): ethereum.CallResult<
    Contract__batchFillOrdersNoThrowResultTotalFillResultsStruct
  > {
    let result = super.tryCall(
      "batchFillOrdersNoThrow",
      "batchFillOrdersNoThrow((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256[],bytes[]):((uint256,uint256,uint256,uint256))",
      [
        ethereum.Value.fromTupleArray(orders),
        ethereum.Value.fromUnsignedBigIntArray(takerAssetFillAmounts),
        ethereum.Value.fromBytesArray(signatures)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as Contract__batchFillOrdersNoThrowResultTotalFillResultsStruct
    );
  }

  getAssetProxy(assetProxyId: Bytes): Address {
    let result = super.call(
      "getAssetProxy",
      "getAssetProxy(bytes4):(address)",
      [ethereum.Value.fromFixedBytes(assetProxyId)]
    );

    return result[0].toAddress();
  }

  try_getAssetProxy(assetProxyId: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getAssetProxy",
      "getAssetProxy(bytes4):(address)",
      [ethereum.Value.fromFixedBytes(assetProxyId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  transactions(param0: Bytes): boolean {
    let result = super.call("transactions", "transactions(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toBoolean();
  }

  try_transactions(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("transactions", "transactions(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  fillOrKillOrder(
    order: Contract__fillOrKillOrderInputOrderStruct,
    takerAssetFillAmount: BigInt,
    signature: Bytes
  ): Contract__fillOrKillOrderResultFillResultsStruct {
    let result = super.call(
      "fillOrKillOrder",
      "fillOrKillOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),uint256,bytes):((uint256,uint256,uint256,uint256))",
      [
        ethereum.Value.fromTuple(order),
        ethereum.Value.fromUnsignedBigInt(takerAssetFillAmount),
        ethereum.Value.fromBytes(signature)
      ]
    );

    return result[0].toTuple() as Contract__fillOrKillOrderResultFillResultsStruct;
  }

  try_fillOrKillOrder(
    order: Contract__fillOrKillOrderInputOrderStruct,
    takerAssetFillAmount: BigInt,
    signature: Bytes
  ): ethereum.CallResult<Contract__fillOrKillOrderResultFillResultsStruct> {
    let result = super.tryCall(
      "fillOrKillOrder",
      "fillOrKillOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),uint256,bytes):((uint256,uint256,uint256,uint256))",
      [
        ethereum.Value.fromTuple(order),
        ethereum.Value.fromUnsignedBigInt(takerAssetFillAmount),
        ethereum.Value.fromBytes(signature)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as Contract__fillOrKillOrderResultFillResultsStruct
    );
  }

  allowedValidators(param0: Address, param1: Address): boolean {
    let result = super.call(
      "allowedValidators",
      "allowedValidators(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBoolean();
  }

  try_allowedValidators(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "allowedValidators",
      "allowedValidators(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  marketSellOrders(
    orders: Array<Contract__marketSellOrdersInputOrdersStruct>,
    takerAssetFillAmount: BigInt,
    signatures: Array<Bytes>
  ): Contract__marketSellOrdersResultTotalFillResultsStruct {
    let result = super.call(
      "marketSellOrders",
      "marketSellOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256,bytes[]):((uint256,uint256,uint256,uint256))",
      [
        ethereum.Value.fromTupleArray(orders),
        ethereum.Value.fromUnsignedBigInt(takerAssetFillAmount),
        ethereum.Value.fromBytesArray(signatures)
      ]
    );

    return result[0].toTuple() as Contract__marketSellOrdersResultTotalFillResultsStruct;
  }

  try_marketSellOrders(
    orders: Array<Contract__marketSellOrdersInputOrdersStruct>,
    takerAssetFillAmount: BigInt,
    signatures: Array<Bytes>
  ): ethereum.CallResult<
    Contract__marketSellOrdersResultTotalFillResultsStruct
  > {
    let result = super.tryCall(
      "marketSellOrders",
      "marketSellOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256,bytes[]):((uint256,uint256,uint256,uint256))",
      [
        ethereum.Value.fromTupleArray(orders),
        ethereum.Value.fromUnsignedBigInt(takerAssetFillAmount),
        ethereum.Value.fromBytesArray(signatures)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as Contract__marketSellOrdersResultTotalFillResultsStruct
    );
  }

  getOrdersInfo(
    orders: Array<Contract__getOrdersInfoInputOrdersStruct>
  ): Array<Contract__getOrdersInfoResultValue0Struct> {
    let result = super.call(
      "getOrdersInfo",
      "getOrdersInfo((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[]):((uint8,bytes32,uint256)[])",
      [ethereum.Value.fromTupleArray(orders)]
    );

    return result[0].toTupleArray<Contract__getOrdersInfoResultValue0Struct>();
  }

  try_getOrdersInfo(
    orders: Array<Contract__getOrdersInfoInputOrdersStruct>
  ): ethereum.CallResult<Array<Contract__getOrdersInfoResultValue0Struct>> {
    let result = super.tryCall(
      "getOrdersInfo",
      "getOrdersInfo((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[]):((uint8,bytes32,uint256)[])",
      [ethereum.Value.fromTupleArray(orders)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Contract__getOrdersInfoResultValue0Struct>()
    );
  }

  preSigned(param0: Bytes, param1: Address): boolean {
    let result = super.call("preSigned", "preSigned(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(param0),
      ethereum.Value.fromAddress(param1)
    ]);

    return result[0].toBoolean();
  }

  try_preSigned(param0: Bytes, param1: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "preSigned",
      "preSigned(bytes32,address):(bool)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isValidSignature(
    hash: Bytes,
    signerAddress: Address,
    signature: Bytes
  ): boolean {
    let result = super.call(
      "isValidSignature",
      "isValidSignature(bytes32,address,bytes):(bool)",
      [
        ethereum.Value.fromFixedBytes(hash),
        ethereum.Value.fromAddress(signerAddress),
        ethereum.Value.fromBytes(signature)
      ]
    );

    return result[0].toBoolean();
  }

  try_isValidSignature(
    hash: Bytes,
    signerAddress: Address,
    signature: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isValidSignature",
      "isValidSignature(bytes32,address,bytes):(bool)",
      [
        ethereum.Value.fromFixedBytes(hash),
        ethereum.Value.fromAddress(signerAddress),
        ethereum.Value.fromBytes(signature)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  marketBuyOrdersNoThrow(
    orders: Array<Contract__marketBuyOrdersNoThrowInputOrdersStruct>,
    makerAssetFillAmount: BigInt,
    signatures: Array<Bytes>
  ): Contract__marketBuyOrdersNoThrowResultTotalFillResultsStruct {
    let result = super.call(
      "marketBuyOrdersNoThrow",
      "marketBuyOrdersNoThrow((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256,bytes[]):((uint256,uint256,uint256,uint256))",
      [
        ethereum.Value.fromTupleArray(orders),
        ethereum.Value.fromUnsignedBigInt(makerAssetFillAmount),
        ethereum.Value.fromBytesArray(signatures)
      ]
    );

    return result[0].toTuple() as Contract__marketBuyOrdersNoThrowResultTotalFillResultsStruct;
  }

  try_marketBuyOrdersNoThrow(
    orders: Array<Contract__marketBuyOrdersNoThrowInputOrdersStruct>,
    makerAssetFillAmount: BigInt,
    signatures: Array<Bytes>
  ): ethereum.CallResult<
    Contract__marketBuyOrdersNoThrowResultTotalFillResultsStruct
  > {
    let result = super.tryCall(
      "marketBuyOrdersNoThrow",
      "marketBuyOrdersNoThrow((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256,bytes[]):((uint256,uint256,uint256,uint256))",
      [
        ethereum.Value.fromTupleArray(orders),
        ethereum.Value.fromUnsignedBigInt(makerAssetFillAmount),
        ethereum.Value.fromBytesArray(signatures)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as Contract__marketBuyOrdersNoThrowResultTotalFillResultsStruct
    );
  }

  fillOrder(
    order: Contract__fillOrderInputOrderStruct,
    takerAssetFillAmount: BigInt,
    signature: Bytes
  ): Contract__fillOrderResultFillResultsStruct {
    let result = super.call(
      "fillOrder",
      "fillOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),uint256,bytes):((uint256,uint256,uint256,uint256))",
      [
        ethereum.Value.fromTuple(order),
        ethereum.Value.fromUnsignedBigInt(takerAssetFillAmount),
        ethereum.Value.fromBytes(signature)
      ]
    );

    return result[0].toTuple() as Contract__fillOrderResultFillResultsStruct;
  }

  try_fillOrder(
    order: Contract__fillOrderInputOrderStruct,
    takerAssetFillAmount: BigInt,
    signature: Bytes
  ): ethereum.CallResult<Contract__fillOrderResultFillResultsStruct> {
    let result = super.tryCall(
      "fillOrder",
      "fillOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),uint256,bytes):((uint256,uint256,uint256,uint256))",
      [
        ethereum.Value.fromTuple(order),
        ethereum.Value.fromUnsignedBigInt(takerAssetFillAmount),
        ethereum.Value.fromBytes(signature)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as Contract__fillOrderResultFillResultsStruct
    );
  }

  getOrderInfo(
    order: Contract__getOrderInfoInputOrderStruct
  ): Contract__getOrderInfoResultOrderInfoStruct {
    let result = super.call(
      "getOrderInfo",
      "getOrderInfo((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)):((uint8,bytes32,uint256))",
      [ethereum.Value.fromTuple(order)]
    );

    return result[0].toTuple() as Contract__getOrderInfoResultOrderInfoStruct;
  }

  try_getOrderInfo(
    order: Contract__getOrderInfoInputOrderStruct
  ): ethereum.CallResult<Contract__getOrderInfoResultOrderInfoStruct> {
    let result = super.tryCall(
      "getOrderInfo",
      "getOrderInfo((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)):((uint8,bytes32,uint256))",
      [ethereum.Value.fromTuple(order)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as Contract__getOrderInfoResultOrderInfoStruct
    );
  }

  orderEpoch(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "orderEpoch",
      "orderEpoch(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_orderEpoch(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "orderEpoch",
      "orderEpoch(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ZRX_ASSET_DATA(): Bytes {
    let result = super.call("ZRX_ASSET_DATA", "ZRX_ASSET_DATA():(bytes)", []);

    return result[0].toBytes();
  }

  try_ZRX_ASSET_DATA(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ZRX_ASSET_DATA",
      "ZRX_ASSET_DATA():(bytes)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  marketSellOrdersNoThrow(
    orders: Array<Contract__marketSellOrdersNoThrowInputOrdersStruct>,
    takerAssetFillAmount: BigInt,
    signatures: Array<Bytes>
  ): Contract__marketSellOrdersNoThrowResultTotalFillResultsStruct {
    let result = super.call(
      "marketSellOrdersNoThrow",
      "marketSellOrdersNoThrow((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256,bytes[]):((uint256,uint256,uint256,uint256))",
      [
        ethereum.Value.fromTupleArray(orders),
        ethereum.Value.fromUnsignedBigInt(takerAssetFillAmount),
        ethereum.Value.fromBytesArray(signatures)
      ]
    );

    return result[0].toTuple() as Contract__marketSellOrdersNoThrowResultTotalFillResultsStruct;
  }

  try_marketSellOrdersNoThrow(
    orders: Array<Contract__marketSellOrdersNoThrowInputOrdersStruct>,
    takerAssetFillAmount: BigInt,
    signatures: Array<Bytes>
  ): ethereum.CallResult<
    Contract__marketSellOrdersNoThrowResultTotalFillResultsStruct
  > {
    let result = super.tryCall(
      "marketSellOrdersNoThrow",
      "marketSellOrdersNoThrow((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256,bytes[]):((uint256,uint256,uint256,uint256))",
      [
        ethereum.Value.fromTupleArray(orders),
        ethereum.Value.fromUnsignedBigInt(takerAssetFillAmount),
        ethereum.Value.fromBytesArray(signatures)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as Contract__marketSellOrdersNoThrowResultTotalFillResultsStruct
    );
  }

  EIP712_DOMAIN_HASH(): Bytes {
    let result = super.call(
      "EIP712_DOMAIN_HASH",
      "EIP712_DOMAIN_HASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_EIP712_DOMAIN_HASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "EIP712_DOMAIN_HASH",
      "EIP712_DOMAIN_HASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  marketBuyOrders(
    orders: Array<Contract__marketBuyOrdersInputOrdersStruct>,
    makerAssetFillAmount: BigInt,
    signatures: Array<Bytes>
  ): Contract__marketBuyOrdersResultTotalFillResultsStruct {
    let result = super.call(
      "marketBuyOrders",
      "marketBuyOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256,bytes[]):((uint256,uint256,uint256,uint256))",
      [
        ethereum.Value.fromTupleArray(orders),
        ethereum.Value.fromUnsignedBigInt(makerAssetFillAmount),
        ethereum.Value.fromBytesArray(signatures)
      ]
    );

    return result[0].toTuple() as Contract__marketBuyOrdersResultTotalFillResultsStruct;
  }

  try_marketBuyOrders(
    orders: Array<Contract__marketBuyOrdersInputOrdersStruct>,
    makerAssetFillAmount: BigInt,
    signatures: Array<Bytes>
  ): ethereum.CallResult<
    Contract__marketBuyOrdersResultTotalFillResultsStruct
  > {
    let result = super.tryCall(
      "marketBuyOrders",
      "marketBuyOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256,bytes[]):((uint256,uint256,uint256,uint256))",
      [
        ethereum.Value.fromTupleArray(orders),
        ethereum.Value.fromUnsignedBigInt(makerAssetFillAmount),
        ethereum.Value.fromBytesArray(signatures)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as Contract__marketBuyOrdersResultTotalFillResultsStruct
    );
  }

  currentContextAddress(): Address {
    let result = super.call(
      "currentContextAddress",
      "currentContextAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_currentContextAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "currentContextAddress",
      "currentContextAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  VERSION(): string {
    let result = super.call("VERSION", "VERSION():(string)", []);

    return result[0].toString();
  }

  try_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall("VERSION", "VERSION():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class BatchFillOrdersCall extends ethereum.Call {
  get inputs(): BatchFillOrdersCall__Inputs {
    return new BatchFillOrdersCall__Inputs(this);
  }

  get outputs(): BatchFillOrdersCall__Outputs {
    return new BatchFillOrdersCall__Outputs(this);
  }
}

export class BatchFillOrdersCall__Inputs {
  _call: BatchFillOrdersCall;

  constructor(call: BatchFillOrdersCall) {
    this._call = call;
  }

  get orders(): Array<BatchFillOrdersCallOrdersStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      BatchFillOrdersCallOrdersStruct
    >();
  }

  get takerAssetFillAmounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get signatures(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }
}

export class BatchFillOrdersCall__Outputs {
  _call: BatchFillOrdersCall;

  constructor(call: BatchFillOrdersCall) {
    this._call = call;
  }

  get totalFillResults(): BatchFillOrdersCallTotalFillResultsStruct {
    return this._call.outputValues[0].value.toTuple() as BatchFillOrdersCallTotalFillResultsStruct;
  }
}

export class BatchFillOrdersCallOrdersStruct extends ethereum.Tuple {
  get makerAddress(): Address {
    return this[0].toAddress();
  }

  get takerAddress(): Address {
    return this[1].toAddress();
  }

  get feeRecipientAddress(): Address {
    return this[2].toAddress();
  }

  get senderAddress(): Address {
    return this[3].toAddress();
  }

  get makerAssetAmount(): BigInt {
    return this[4].toBigInt();
  }

  get takerAssetAmount(): BigInt {
    return this[5].toBigInt();
  }

  get makerFee(): BigInt {
    return this[6].toBigInt();
  }

  get takerFee(): BigInt {
    return this[7].toBigInt();
  }

  get expirationTimeSeconds(): BigInt {
    return this[8].toBigInt();
  }

  get salt(): BigInt {
    return this[9].toBigInt();
  }

  get makerAssetData(): Bytes {
    return this[10].toBytes();
  }

  get takerAssetData(): Bytes {
    return this[11].toBytes();
  }
}

export class BatchFillOrdersCallTotalFillResultsStruct extends ethereum.Tuple {
  get makerAssetFilledAmount(): BigInt {
    return this[0].toBigInt();
  }

  get takerAssetFilledAmount(): BigInt {
    return this[1].toBigInt();
  }

  get makerFeePaid(): BigInt {
    return this[2].toBigInt();
  }

  get takerFeePaid(): BigInt {
    return this[3].toBigInt();
  }
}

export class PreSignCall extends ethereum.Call {
  get inputs(): PreSignCall__Inputs {
    return new PreSignCall__Inputs(this);
  }

  get outputs(): PreSignCall__Outputs {
    return new PreSignCall__Outputs(this);
  }
}

export class PreSignCall__Inputs {
  _call: PreSignCall;

  constructor(call: PreSignCall) {
    this._call = call;
  }

  get hash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get signerAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get signature(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class PreSignCall__Outputs {
  _call: PreSignCall;

  constructor(call: PreSignCall) {
    this._call = call;
  }
}

export class MatchOrdersCall extends ethereum.Call {
  get inputs(): MatchOrdersCall__Inputs {
    return new MatchOrdersCall__Inputs(this);
  }

  get outputs(): MatchOrdersCall__Outputs {
    return new MatchOrdersCall__Outputs(this);
  }
}

export class MatchOrdersCall__Inputs {
  _call: MatchOrdersCall;

  constructor(call: MatchOrdersCall) {
    this._call = call;
  }

  get leftOrder(): MatchOrdersCallLeftOrderStruct {
    return this._call.inputValues[0].value.toTuple() as MatchOrdersCallLeftOrderStruct;
  }

  get rightOrder(): MatchOrdersCallRightOrderStruct {
    return this._call.inputValues[1].value.toTuple() as MatchOrdersCallRightOrderStruct;
  }

  get leftSignature(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get rightSignature(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class MatchOrdersCall__Outputs {
  _call: MatchOrdersCall;

  constructor(call: MatchOrdersCall) {
    this._call = call;
  }

  get matchedFillResults(): MatchOrdersCallMatchedFillResultsStruct {
    return this._call.outputValues[0].value.toTuple() as MatchOrdersCallMatchedFillResultsStruct;
  }
}

export class MatchOrdersCallLeftOrderStruct extends ethereum.Tuple {
  get makerAddress(): Address {
    return this[0].toAddress();
  }

  get takerAddress(): Address {
    return this[1].toAddress();
  }

  get feeRecipientAddress(): Address {
    return this[2].toAddress();
  }

  get senderAddress(): Address {
    return this[3].toAddress();
  }

  get makerAssetAmount(): BigInt {
    return this[4].toBigInt();
  }

  get takerAssetAmount(): BigInt {
    return this[5].toBigInt();
  }

  get makerFee(): BigInt {
    return this[6].toBigInt();
  }

  get takerFee(): BigInt {
    return this[7].toBigInt();
  }

  get expirationTimeSeconds(): BigInt {
    return this[8].toBigInt();
  }

  get salt(): BigInt {
    return this[9].toBigInt();
  }

  get makerAssetData(): Bytes {
    return this[10].toBytes();
  }

  get takerAssetData(): Bytes {
    return this[11].toBytes();
  }
}

export class MatchOrdersCallRightOrderStruct extends ethereum.Tuple {
  get makerAddress(): Address {
    return this[0].toAddress();
  }

  get takerAddress(): Address {
    return this[1].toAddress();
  }

  get feeRecipientAddress(): Address {
    return this[2].toAddress();
  }

  get senderAddress(): Address {
    return this[3].toAddress();
  }

  get makerAssetAmount(): BigInt {
    return this[4].toBigInt();
  }

  get takerAssetAmount(): BigInt {
    return this[5].toBigInt();
  }

  get makerFee(): BigInt {
    return this[6].toBigInt();
  }

  get takerFee(): BigInt {
    return this[7].toBigInt();
  }

  get expirationTimeSeconds(): BigInt {
    return this[8].toBigInt();
  }

  get salt(): BigInt {
    return this[9].toBigInt();
  }

  get makerAssetData(): Bytes {
    return this[10].toBytes();
  }

  get takerAssetData(): Bytes {
    return this[11].toBytes();
  }
}

export class MatchOrdersCallMatchedFillResultsStruct extends ethereum.Tuple {
  get left(): MatchOrdersCallMatchedFillResultsLeftStruct {
    return this[0].toTuple() as MatchOrdersCallMatchedFillResultsLeftStruct;
  }

  get right(): MatchOrdersCallMatchedFillResultsRightStruct {
    return this[1].toTuple() as MatchOrdersCallMatchedFillResultsRightStruct;
  }

  get leftMakerAssetSpreadAmount(): BigInt {
    return this[2].toBigInt();
  }
}

export class MatchOrdersCallMatchedFillResultsLeftStruct extends ethereum.Tuple {
  get makerAssetFilledAmount(): BigInt {
    return this[0].toBigInt();
  }

  get takerAssetFilledAmount(): BigInt {
    return this[1].toBigInt();
  }

  get makerFeePaid(): BigInt {
    return this[2].toBigInt();
  }

  get takerFeePaid(): BigInt {
    return this[3].toBigInt();
  }
}

export class MatchOrdersCallMatchedFillResultsRightStruct extends ethereum.Tuple {
  get makerAssetFilledAmount(): BigInt {
    return this[0].toBigInt();
  }

  get takerAssetFilledAmount(): BigInt {
    return this[1].toBigInt();
  }

  get makerFeePaid(): BigInt {
    return this[2].toBigInt();
  }

  get takerFeePaid(): BigInt {
    return this[3].toBigInt();
  }
}

export class FillOrderNoThrowCall extends ethereum.Call {
  get inputs(): FillOrderNoThrowCall__Inputs {
    return new FillOrderNoThrowCall__Inputs(this);
  }

  get outputs(): FillOrderNoThrowCall__Outputs {
    return new FillOrderNoThrowCall__Outputs(this);
  }
}

export class FillOrderNoThrowCall__Inputs {
  _call: FillOrderNoThrowCall;

  constructor(call: FillOrderNoThrowCall) {
    this._call = call;
  }

  get order(): FillOrderNoThrowCallOrderStruct {
    return this._call.inputValues[0].value.toTuple() as FillOrderNoThrowCallOrderStruct;
  }

  get takerAssetFillAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get signature(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class FillOrderNoThrowCall__Outputs {
  _call: FillOrderNoThrowCall;

  constructor(call: FillOrderNoThrowCall) {
    this._call = call;
  }

  get fillResults(): FillOrderNoThrowCallFillResultsStruct {
    return this._call.outputValues[0].value.toTuple() as FillOrderNoThrowCallFillResultsStruct;
  }
}

export class FillOrderNoThrowCallOrderStruct extends ethereum.Tuple {
  get makerAddress(): Address {
    return this[0].toAddress();
  }

  get takerAddress(): Address {
    return this[1].toAddress();
  }

  get feeRecipientAddress(): Address {
    return this[2].toAddress();
  }

  get senderAddress(): Address {
    return this[3].toAddress();
  }

  get makerAssetAmount(): BigInt {
    return this[4].toBigInt();
  }

  get takerAssetAmount(): BigInt {
    return this[5].toBigInt();
  }

  get makerFee(): BigInt {
    return this[6].toBigInt();
  }

  get takerFee(): BigInt {
    return this[7].toBigInt();
  }

  get expirationTimeSeconds(): BigInt {
    return this[8].toBigInt();
  }

  get salt(): BigInt {
    return this[9].toBigInt();
  }

  get makerAssetData(): Bytes {
    return this[10].toBytes();
  }

  get takerAssetData(): Bytes {
    return this[11].toBytes();
  }
}

export class FillOrderNoThrowCallFillResultsStruct extends ethereum.Tuple {
  get makerAssetFilledAmount(): BigInt {
    return this[0].toBigInt();
  }

  get takerAssetFilledAmount(): BigInt {
    return this[1].toBigInt();
  }

  get makerFeePaid(): BigInt {
    return this[2].toBigInt();
  }

  get takerFeePaid(): BigInt {
    return this[3].toBigInt();
  }
}

export class BatchCancelOrdersCall extends ethereum.Call {
  get inputs(): BatchCancelOrdersCall__Inputs {
    return new BatchCancelOrdersCall__Inputs(this);
  }

  get outputs(): BatchCancelOrdersCall__Outputs {
    return new BatchCancelOrdersCall__Outputs(this);
  }
}

export class BatchCancelOrdersCall__Inputs {
  _call: BatchCancelOrdersCall;

  constructor(call: BatchCancelOrdersCall) {
    this._call = call;
  }

  get orders(): Array<BatchCancelOrdersCallOrdersStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      BatchCancelOrdersCallOrdersStruct
    >();
  }
}

export class BatchCancelOrdersCall__Outputs {
  _call: BatchCancelOrdersCall;

  constructor(call: BatchCancelOrdersCall) {
    this._call = call;
  }
}

export class BatchCancelOrdersCallOrdersStruct extends ethereum.Tuple {
  get makerAddress(): Address {
    return this[0].toAddress();
  }

  get takerAddress(): Address {
    return this[1].toAddress();
  }

  get feeRecipientAddress(): Address {
    return this[2].toAddress();
  }

  get senderAddress(): Address {
    return this[3].toAddress();
  }

  get makerAssetAmount(): BigInt {
    return this[4].toBigInt();
  }

  get takerAssetAmount(): BigInt {
    return this[5].toBigInt();
  }

  get makerFee(): BigInt {
    return this[6].toBigInt();
  }

  get takerFee(): BigInt {
    return this[7].toBigInt();
  }

  get expirationTimeSeconds(): BigInt {
    return this[8].toBigInt();
  }

  get salt(): BigInt {
    return this[9].toBigInt();
  }

  get makerAssetData(): Bytes {
    return this[10].toBytes();
  }

  get takerAssetData(): Bytes {
    return this[11].toBytes();
  }
}

export class BatchFillOrKillOrdersCall extends ethereum.Call {
  get inputs(): BatchFillOrKillOrdersCall__Inputs {
    return new BatchFillOrKillOrdersCall__Inputs(this);
  }

  get outputs(): BatchFillOrKillOrdersCall__Outputs {
    return new BatchFillOrKillOrdersCall__Outputs(this);
  }
}

export class BatchFillOrKillOrdersCall__Inputs {
  _call: BatchFillOrKillOrdersCall;

  constructor(call: BatchFillOrKillOrdersCall) {
    this._call = call;
  }

  get orders(): Array<BatchFillOrKillOrdersCallOrdersStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      BatchFillOrKillOrdersCallOrdersStruct
    >();
  }

  get takerAssetFillAmounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get signatures(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }
}

export class BatchFillOrKillOrdersCall__Outputs {
  _call: BatchFillOrKillOrdersCall;

  constructor(call: BatchFillOrKillOrdersCall) {
    this._call = call;
  }

  get totalFillResults(): BatchFillOrKillOrdersCallTotalFillResultsStruct {
    return this._call.outputValues[0].value.toTuple() as BatchFillOrKillOrdersCallTotalFillResultsStruct;
  }
}

export class BatchFillOrKillOrdersCallOrdersStruct extends ethereum.Tuple {
  get makerAddress(): Address {
    return this[0].toAddress();
  }

  get takerAddress(): Address {
    return this[1].toAddress();
  }

  get feeRecipientAddress(): Address {
    return this[2].toAddress();
  }

  get senderAddress(): Address {
    return this[3].toAddress();
  }

  get makerAssetAmount(): BigInt {
    return this[4].toBigInt();
  }

  get takerAssetAmount(): BigInt {
    return this[5].toBigInt();
  }

  get makerFee(): BigInt {
    return this[6].toBigInt();
  }

  get takerFee(): BigInt {
    return this[7].toBigInt();
  }

  get expirationTimeSeconds(): BigInt {
    return this[8].toBigInt();
  }

  get salt(): BigInt {
    return this[9].toBigInt();
  }

  get makerAssetData(): Bytes {
    return this[10].toBytes();
  }

  get takerAssetData(): Bytes {
    return this[11].toBytes();
  }
}

export class BatchFillOrKillOrdersCallTotalFillResultsStruct extends ethereum.Tuple {
  get makerAssetFilledAmount(): BigInt {
    return this[0].toBigInt();
  }

  get takerAssetFilledAmount(): BigInt {
    return this[1].toBigInt();
  }

  get makerFeePaid(): BigInt {
    return this[2].toBigInt();
  }

  get takerFeePaid(): BigInt {
    return this[3].toBigInt();
  }
}

export class CancelOrdersUpToCall extends ethereum.Call {
  get inputs(): CancelOrdersUpToCall__Inputs {
    return new CancelOrdersUpToCall__Inputs(this);
  }

  get outputs(): CancelOrdersUpToCall__Outputs {
    return new CancelOrdersUpToCall__Outputs(this);
  }
}

export class CancelOrdersUpToCall__Inputs {
  _call: CancelOrdersUpToCall;

  constructor(call: CancelOrdersUpToCall) {
    this._call = call;
  }

  get targetOrderEpoch(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelOrdersUpToCall__Outputs {
  _call: CancelOrdersUpToCall;

  constructor(call: CancelOrdersUpToCall) {
    this._call = call;
  }
}

export class BatchFillOrdersNoThrowCall extends ethereum.Call {
  get inputs(): BatchFillOrdersNoThrowCall__Inputs {
    return new BatchFillOrdersNoThrowCall__Inputs(this);
  }

  get outputs(): BatchFillOrdersNoThrowCall__Outputs {
    return new BatchFillOrdersNoThrowCall__Outputs(this);
  }
}

export class BatchFillOrdersNoThrowCall__Inputs {
  _call: BatchFillOrdersNoThrowCall;

  constructor(call: BatchFillOrdersNoThrowCall) {
    this._call = call;
  }

  get orders(): Array<BatchFillOrdersNoThrowCallOrdersStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      BatchFillOrdersNoThrowCallOrdersStruct
    >();
  }

  get takerAssetFillAmounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get signatures(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }
}

export class BatchFillOrdersNoThrowCall__Outputs {
  _call: BatchFillOrdersNoThrowCall;

  constructor(call: BatchFillOrdersNoThrowCall) {
    this._call = call;
  }

  get totalFillResults(): BatchFillOrdersNoThrowCallTotalFillResultsStruct {
    return this._call.outputValues[0].value.toTuple() as BatchFillOrdersNoThrowCallTotalFillResultsStruct;
  }
}

export class BatchFillOrdersNoThrowCallOrdersStruct extends ethereum.Tuple {
  get makerAddress(): Address {
    return this[0].toAddress();
  }

  get takerAddress(): Address {
    return this[1].toAddress();
  }

  get feeRecipientAddress(): Address {
    return this[2].toAddress();
  }

  get senderAddress(): Address {
    return this[3].toAddress();
  }

  get makerAssetAmount(): BigInt {
    return this[4].toBigInt();
  }

  get takerAssetAmount(): BigInt {
    return this[5].toBigInt();
  }

  get makerFee(): BigInt {
    return this[6].toBigInt();
  }

  get takerFee(): BigInt {
    return this[7].toBigInt();
  }

  get expirationTimeSeconds(): BigInt {
    return this[8].toBigInt();
  }

  get salt(): BigInt {
    return this[9].toBigInt();
  }

  get makerAssetData(): Bytes {
    return this[10].toBytes();
  }

  get takerAssetData(): Bytes {
    return this[11].toBytes();
  }
}

export class BatchFillOrdersNoThrowCallTotalFillResultsStruct extends ethereum.Tuple {
  get makerAssetFilledAmount(): BigInt {
    return this[0].toBigInt();
  }

  get takerAssetFilledAmount(): BigInt {
    return this[1].toBigInt();
  }

  get makerFeePaid(): BigInt {
    return this[2].toBigInt();
  }

  get takerFeePaid(): BigInt {
    return this[3].toBigInt();
  }
}

export class FillOrKillOrderCall extends ethereum.Call {
  get inputs(): FillOrKillOrderCall__Inputs {
    return new FillOrKillOrderCall__Inputs(this);
  }

  get outputs(): FillOrKillOrderCall__Outputs {
    return new FillOrKillOrderCall__Outputs(this);
  }
}

export class FillOrKillOrderCall__Inputs {
  _call: FillOrKillOrderCall;

  constructor(call: FillOrKillOrderCall) {
    this._call = call;
  }

  get order(): FillOrKillOrderCallOrderStruct {
    return this._call.inputValues[0].value.toTuple() as FillOrKillOrderCallOrderStruct;
  }

  get takerAssetFillAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get signature(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class FillOrKillOrderCall__Outputs {
  _call: FillOrKillOrderCall;

  constructor(call: FillOrKillOrderCall) {
    this._call = call;
  }

  get fillResults(): FillOrKillOrderCallFillResultsStruct {
    return this._call.outputValues[0].value.toTuple() as FillOrKillOrderCallFillResultsStruct;
  }
}

export class FillOrKillOrderCallOrderStruct extends ethereum.Tuple {
  get makerAddress(): Address {
    return this[0].toAddress();
  }

  get takerAddress(): Address {
    return this[1].toAddress();
  }

  get feeRecipientAddress(): Address {
    return this[2].toAddress();
  }

  get senderAddress(): Address {
    return this[3].toAddress();
  }

  get makerAssetAmount(): BigInt {
    return this[4].toBigInt();
  }

  get takerAssetAmount(): BigInt {
    return this[5].toBigInt();
  }

  get makerFee(): BigInt {
    return this[6].toBigInt();
  }

  get takerFee(): BigInt {
    return this[7].toBigInt();
  }

  get expirationTimeSeconds(): BigInt {
    return this[8].toBigInt();
  }

  get salt(): BigInt {
    return this[9].toBigInt();
  }

  get makerAssetData(): Bytes {
    return this[10].toBytes();
  }

  get takerAssetData(): Bytes {
    return this[11].toBytes();
  }
}

export class FillOrKillOrderCallFillResultsStruct extends ethereum.Tuple {
  get makerAssetFilledAmount(): BigInt {
    return this[0].toBigInt();
  }

  get takerAssetFilledAmount(): BigInt {
    return this[1].toBigInt();
  }

  get makerFeePaid(): BigInt {
    return this[2].toBigInt();
  }

  get takerFeePaid(): BigInt {
    return this[3].toBigInt();
  }
}

export class SetSignatureValidatorApprovalCall extends ethereum.Call {
  get inputs(): SetSignatureValidatorApprovalCall__Inputs {
    return new SetSignatureValidatorApprovalCall__Inputs(this);
  }

  get outputs(): SetSignatureValidatorApprovalCall__Outputs {
    return new SetSignatureValidatorApprovalCall__Outputs(this);
  }
}

export class SetSignatureValidatorApprovalCall__Inputs {
  _call: SetSignatureValidatorApprovalCall;

  constructor(call: SetSignatureValidatorApprovalCall) {
    this._call = call;
  }

  get validatorAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approval(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetSignatureValidatorApprovalCall__Outputs {
  _call: SetSignatureValidatorApprovalCall;

  constructor(call: SetSignatureValidatorApprovalCall) {
    this._call = call;
  }
}

export class MarketSellOrdersCall extends ethereum.Call {
  get inputs(): MarketSellOrdersCall__Inputs {
    return new MarketSellOrdersCall__Inputs(this);
  }

  get outputs(): MarketSellOrdersCall__Outputs {
    return new MarketSellOrdersCall__Outputs(this);
  }
}

export class MarketSellOrdersCall__Inputs {
  _call: MarketSellOrdersCall;

  constructor(call: MarketSellOrdersCall) {
    this._call = call;
  }

  get orders(): Array<MarketSellOrdersCallOrdersStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      MarketSellOrdersCallOrdersStruct
    >();
  }

  get takerAssetFillAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get signatures(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }
}

export class MarketSellOrdersCall__Outputs {
  _call: MarketSellOrdersCall;

  constructor(call: MarketSellOrdersCall) {
    this._call = call;
  }

  get totalFillResults(): MarketSellOrdersCallTotalFillResultsStruct {
    return this._call.outputValues[0].value.toTuple() as MarketSellOrdersCallTotalFillResultsStruct;
  }
}

export class MarketSellOrdersCallOrdersStruct extends ethereum.Tuple {
  get makerAddress(): Address {
    return this[0].toAddress();
  }

  get takerAddress(): Address {
    return this[1].toAddress();
  }

  get feeRecipientAddress(): Address {
    return this[2].toAddress();
  }

  get senderAddress(): Address {
    return this[3].toAddress();
  }

  get makerAssetAmount(): BigInt {
    return this[4].toBigInt();
  }

  get takerAssetAmount(): BigInt {
    return this[5].toBigInt();
  }

  get makerFee(): BigInt {
    return this[6].toBigInt();
  }

  get takerFee(): BigInt {
    return this[7].toBigInt();
  }

  get expirationTimeSeconds(): BigInt {
    return this[8].toBigInt();
  }

  get salt(): BigInt {
    return this[9].toBigInt();
  }

  get makerAssetData(): Bytes {
    return this[10].toBytes();
  }

  get takerAssetData(): Bytes {
    return this[11].toBytes();
  }
}

export class MarketSellOrdersCallTotalFillResultsStruct extends ethereum.Tuple {
  get makerAssetFilledAmount(): BigInt {
    return this[0].toBigInt();
  }

  get takerAssetFilledAmount(): BigInt {
    return this[1].toBigInt();
  }

  get makerFeePaid(): BigInt {
    return this[2].toBigInt();
  }

  get takerFeePaid(): BigInt {
    return this[3].toBigInt();
  }
}

export class MarketBuyOrdersNoThrowCall extends ethereum.Call {
  get inputs(): MarketBuyOrdersNoThrowCall__Inputs {
    return new MarketBuyOrdersNoThrowCall__Inputs(this);
  }

  get outputs(): MarketBuyOrdersNoThrowCall__Outputs {
    return new MarketBuyOrdersNoThrowCall__Outputs(this);
  }
}

export class MarketBuyOrdersNoThrowCall__Inputs {
  _call: MarketBuyOrdersNoThrowCall;

  constructor(call: MarketBuyOrdersNoThrowCall) {
    this._call = call;
  }

  get orders(): Array<MarketBuyOrdersNoThrowCallOrdersStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      MarketBuyOrdersNoThrowCallOrdersStruct
    >();
  }

  get makerAssetFillAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get signatures(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }
}

export class MarketBuyOrdersNoThrowCall__Outputs {
  _call: MarketBuyOrdersNoThrowCall;

  constructor(call: MarketBuyOrdersNoThrowCall) {
    this._call = call;
  }

  get totalFillResults(): MarketBuyOrdersNoThrowCallTotalFillResultsStruct {
    return this._call.outputValues[0].value.toTuple() as MarketBuyOrdersNoThrowCallTotalFillResultsStruct;
  }
}

export class MarketBuyOrdersNoThrowCallOrdersStruct extends ethereum.Tuple {
  get makerAddress(): Address {
    return this[0].toAddress();
  }

  get takerAddress(): Address {
    return this[1].toAddress();
  }

  get feeRecipientAddress(): Address {
    return this[2].toAddress();
  }

  get senderAddress(): Address {
    return this[3].toAddress();
  }

  get makerAssetAmount(): BigInt {
    return this[4].toBigInt();
  }

  get takerAssetAmount(): BigInt {
    return this[5].toBigInt();
  }

  get makerFee(): BigInt {
    return this[6].toBigInt();
  }

  get takerFee(): BigInt {
    return this[7].toBigInt();
  }

  get expirationTimeSeconds(): BigInt {
    return this[8].toBigInt();
  }

  get salt(): BigInt {
    return this[9].toBigInt();
  }

  get makerAssetData(): Bytes {
    return this[10].toBytes();
  }

  get takerAssetData(): Bytes {
    return this[11].toBytes();
  }
}

export class MarketBuyOrdersNoThrowCallTotalFillResultsStruct extends ethereum.Tuple {
  get makerAssetFilledAmount(): BigInt {
    return this[0].toBigInt();
  }

  get takerAssetFilledAmount(): BigInt {
    return this[1].toBigInt();
  }

  get makerFeePaid(): BigInt {
    return this[2].toBigInt();
  }

  get takerFeePaid(): BigInt {
    return this[3].toBigInt();
  }
}

export class FillOrderCall extends ethereum.Call {
  get inputs(): FillOrderCall__Inputs {
    return new FillOrderCall__Inputs(this);
  }

  get outputs(): FillOrderCall__Outputs {
    return new FillOrderCall__Outputs(this);
  }
}

export class FillOrderCall__Inputs {
  _call: FillOrderCall;

  constructor(call: FillOrderCall) {
    this._call = call;
  }

  get order(): FillOrderCallOrderStruct {
    return this._call.inputValues[0].value.toTuple() as FillOrderCallOrderStruct;
  }

  get takerAssetFillAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get signature(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class FillOrderCall__Outputs {
  _call: FillOrderCall;

  constructor(call: FillOrderCall) {
    this._call = call;
  }

  get fillResults(): FillOrderCallFillResultsStruct {
    return this._call.outputValues[0].value.toTuple() as FillOrderCallFillResultsStruct;
  }
}

export class FillOrderCallOrderStruct extends ethereum.Tuple {
  get makerAddress(): Address {
    return this[0].toAddress();
  }

  get takerAddress(): Address {
    return this[1].toAddress();
  }

  get feeRecipientAddress(): Address {
    return this[2].toAddress();
  }

  get senderAddress(): Address {
    return this[3].toAddress();
  }

  get makerAssetAmount(): BigInt {
    return this[4].toBigInt();
  }

  get takerAssetAmount(): BigInt {
    return this[5].toBigInt();
  }

  get makerFee(): BigInt {
    return this[6].toBigInt();
  }

  get takerFee(): BigInt {
    return this[7].toBigInt();
  }

  get expirationTimeSeconds(): BigInt {
    return this[8].toBigInt();
  }

  get salt(): BigInt {
    return this[9].toBigInt();
  }

  get makerAssetData(): Bytes {
    return this[10].toBytes();
  }

  get takerAssetData(): Bytes {
    return this[11].toBytes();
  }
}

export class FillOrderCallFillResultsStruct extends ethereum.Tuple {
  get makerAssetFilledAmount(): BigInt {
    return this[0].toBigInt();
  }

  get takerAssetFilledAmount(): BigInt {
    return this[1].toBigInt();
  }

  get makerFeePaid(): BigInt {
    return this[2].toBigInt();
  }

  get takerFeePaid(): BigInt {
    return this[3].toBigInt();
  }
}

export class ExecuteTransactionCall extends ethereum.Call {
  get inputs(): ExecuteTransactionCall__Inputs {
    return new ExecuteTransactionCall__Inputs(this);
  }

  get outputs(): ExecuteTransactionCall__Outputs {
    return new ExecuteTransactionCall__Outputs(this);
  }
}

export class ExecuteTransactionCall__Inputs {
  _call: ExecuteTransactionCall;

  constructor(call: ExecuteTransactionCall) {
    this._call = call;
  }

  get salt(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get signerAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get signature(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class ExecuteTransactionCall__Outputs {
  _call: ExecuteTransactionCall;

  constructor(call: ExecuteTransactionCall) {
    this._call = call;
  }
}

export class RegisterAssetProxyCall extends ethereum.Call {
  get inputs(): RegisterAssetProxyCall__Inputs {
    return new RegisterAssetProxyCall__Inputs(this);
  }

  get outputs(): RegisterAssetProxyCall__Outputs {
    return new RegisterAssetProxyCall__Outputs(this);
  }
}

export class RegisterAssetProxyCall__Inputs {
  _call: RegisterAssetProxyCall;

  constructor(call: RegisterAssetProxyCall) {
    this._call = call;
  }

  get assetProxy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RegisterAssetProxyCall__Outputs {
  _call: RegisterAssetProxyCall;

  constructor(call: RegisterAssetProxyCall) {
    this._call = call;
  }
}

export class CancelOrderCall extends ethereum.Call {
  get inputs(): CancelOrderCall__Inputs {
    return new CancelOrderCall__Inputs(this);
  }

  get outputs(): CancelOrderCall__Outputs {
    return new CancelOrderCall__Outputs(this);
  }
}

export class CancelOrderCall__Inputs {
  _call: CancelOrderCall;

  constructor(call: CancelOrderCall) {
    this._call = call;
  }

  get order(): CancelOrderCallOrderStruct {
    return this._call.inputValues[0].value.toTuple() as CancelOrderCallOrderStruct;
  }
}

export class CancelOrderCall__Outputs {
  _call: CancelOrderCall;

  constructor(call: CancelOrderCall) {
    this._call = call;
  }
}

export class CancelOrderCallOrderStruct extends ethereum.Tuple {
  get makerAddress(): Address {
    return this[0].toAddress();
  }

  get takerAddress(): Address {
    return this[1].toAddress();
  }

  get feeRecipientAddress(): Address {
    return this[2].toAddress();
  }

  get senderAddress(): Address {
    return this[3].toAddress();
  }

  get makerAssetAmount(): BigInt {
    return this[4].toBigInt();
  }

  get takerAssetAmount(): BigInt {
    return this[5].toBigInt();
  }

  get makerFee(): BigInt {
    return this[6].toBigInt();
  }

  get takerFee(): BigInt {
    return this[7].toBigInt();
  }

  get expirationTimeSeconds(): BigInt {
    return this[8].toBigInt();
  }

  get salt(): BigInt {
    return this[9].toBigInt();
  }

  get makerAssetData(): Bytes {
    return this[10].toBytes();
  }

  get takerAssetData(): Bytes {
    return this[11].toBytes();
  }
}

export class MarketSellOrdersNoThrowCall extends ethereum.Call {
  get inputs(): MarketSellOrdersNoThrowCall__Inputs {
    return new MarketSellOrdersNoThrowCall__Inputs(this);
  }

  get outputs(): MarketSellOrdersNoThrowCall__Outputs {
    return new MarketSellOrdersNoThrowCall__Outputs(this);
  }
}

export class MarketSellOrdersNoThrowCall__Inputs {
  _call: MarketSellOrdersNoThrowCall;

  constructor(call: MarketSellOrdersNoThrowCall) {
    this._call = call;
  }

  get orders(): Array<MarketSellOrdersNoThrowCallOrdersStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      MarketSellOrdersNoThrowCallOrdersStruct
    >();
  }

  get takerAssetFillAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get signatures(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }
}

export class MarketSellOrdersNoThrowCall__Outputs {
  _call: MarketSellOrdersNoThrowCall;

  constructor(call: MarketSellOrdersNoThrowCall) {
    this._call = call;
  }

  get totalFillResults(): MarketSellOrdersNoThrowCallTotalFillResultsStruct {
    return this._call.outputValues[0].value.toTuple() as MarketSellOrdersNoThrowCallTotalFillResultsStruct;
  }
}

export class MarketSellOrdersNoThrowCallOrdersStruct extends ethereum.Tuple {
  get makerAddress(): Address {
    return this[0].toAddress();
  }

  get takerAddress(): Address {
    return this[1].toAddress();
  }

  get feeRecipientAddress(): Address {
    return this[2].toAddress();
  }

  get senderAddress(): Address {
    return this[3].toAddress();
  }

  get makerAssetAmount(): BigInt {
    return this[4].toBigInt();
  }

  get takerAssetAmount(): BigInt {
    return this[5].toBigInt();
  }

  get makerFee(): BigInt {
    return this[6].toBigInt();
  }

  get takerFee(): BigInt {
    return this[7].toBigInt();
  }

  get expirationTimeSeconds(): BigInt {
    return this[8].toBigInt();
  }

  get salt(): BigInt {
    return this[9].toBigInt();
  }

  get makerAssetData(): Bytes {
    return this[10].toBytes();
  }

  get takerAssetData(): Bytes {
    return this[11].toBytes();
  }
}

export class MarketSellOrdersNoThrowCallTotalFillResultsStruct extends ethereum.Tuple {
  get makerAssetFilledAmount(): BigInt {
    return this[0].toBigInt();
  }

  get takerAssetFilledAmount(): BigInt {
    return this[1].toBigInt();
  }

  get makerFeePaid(): BigInt {
    return this[2].toBigInt();
  }

  get takerFeePaid(): BigInt {
    return this[3].toBigInt();
  }
}

export class MarketBuyOrdersCall extends ethereum.Call {
  get inputs(): MarketBuyOrdersCall__Inputs {
    return new MarketBuyOrdersCall__Inputs(this);
  }

  get outputs(): MarketBuyOrdersCall__Outputs {
    return new MarketBuyOrdersCall__Outputs(this);
  }
}

export class MarketBuyOrdersCall__Inputs {
  _call: MarketBuyOrdersCall;

  constructor(call: MarketBuyOrdersCall) {
    this._call = call;
  }

  get orders(): Array<MarketBuyOrdersCallOrdersStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      MarketBuyOrdersCallOrdersStruct
    >();
  }

  get makerAssetFillAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get signatures(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }
}

export class MarketBuyOrdersCall__Outputs {
  _call: MarketBuyOrdersCall;

  constructor(call: MarketBuyOrdersCall) {
    this._call = call;
  }

  get totalFillResults(): MarketBuyOrdersCallTotalFillResultsStruct {
    return this._call.outputValues[0].value.toTuple() as MarketBuyOrdersCallTotalFillResultsStruct;
  }
}

export class MarketBuyOrdersCallOrdersStruct extends ethereum.Tuple {
  get makerAddress(): Address {
    return this[0].toAddress();
  }

  get takerAddress(): Address {
    return this[1].toAddress();
  }

  get feeRecipientAddress(): Address {
    return this[2].toAddress();
  }

  get senderAddress(): Address {
    return this[3].toAddress();
  }

  get makerAssetAmount(): BigInt {
    return this[4].toBigInt();
  }

  get takerAssetAmount(): BigInt {
    return this[5].toBigInt();
  }

  get makerFee(): BigInt {
    return this[6].toBigInt();
  }

  get takerFee(): BigInt {
    return this[7].toBigInt();
  }

  get expirationTimeSeconds(): BigInt {
    return this[8].toBigInt();
  }

  get salt(): BigInt {
    return this[9].toBigInt();
  }

  get makerAssetData(): Bytes {
    return this[10].toBytes();
  }

  get takerAssetData(): Bytes {
    return this[11].toBytes();
  }
}

export class MarketBuyOrdersCallTotalFillResultsStruct extends ethereum.Tuple {
  get makerAssetFilledAmount(): BigInt {
    return this[0].toBigInt();
  }

  get takerAssetFilledAmount(): BigInt {
    return this[1].toBigInt();
  }

  get makerFeePaid(): BigInt {
    return this[2].toBigInt();
  }

  get takerFeePaid(): BigInt {
    return this[3].toBigInt();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _zrxAssetData(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
